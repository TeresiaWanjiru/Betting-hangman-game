import React, { useEffect, useRef } from 'react';
import style from './Keyboard.module.css';

const BackgroundImage = () => {
  const canvasRef = useRef<HTMLCanvasElement | null>(null);
  const spriteSheet = new Image();

  const spriteWidth = 800;
  const spriteHeight = 600;
  let currentFrame = 0;
  let animationFrameId: number | undefined;
  let numFrames: number;

  useEffect(() => {
    const canvas = canvasRef.current;
    const context = canvas?.getContext('2d');

    if (!canvas || !context) {
      console.error('Canvas or context is not available');
      return;
    }

    spriteSheet.src = '/images/fire.jpg';

    spriteSheet.onload = () => {
      numFrames = Math.floor(spriteSheet.width / spriteWidth);
      animateSprite();
    };

    return () => {
      // Cleanup function
      if (animationFrameId) {
        cancelAnimationFrame(animationFrameId);
      }
    };
  }, []);

  const animateSprite = () => {
    const canvas = canvasRef.current;
    const context = canvas?.getContext('2d');

    if (!canvas || !context) {
      console.error('Canvas or context is not available');
      return;
    }

    context.clearRect(0, 0, canvas.width, canvas.height);
    const frameWidth = spriteSheet.width / numFrames;

    context.drawImage(
      spriteSheet,
      currentFrame * frameWidth, // Calculate the source X position for the current frame
      0,
      frameWidth,
      spriteHeight,
      0,
      0,
      canvas.width,
      canvas.height,
    );

    // updating the current frame for the next iteration
    currentFrame = (currentFrame + 1) % numFrames;

    animationFrameId = requestAnimationFrame(animateSprite);
  };

  return <canvas ref={canvasRef} className={style.fadeInImage} />;
};

export default BackgroundImage;
